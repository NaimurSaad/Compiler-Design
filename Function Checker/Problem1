#include <iostream>
#include <fstream>
#include <cstring>
using namespace std;

char validTypes[][10] = {"int","void","float","double","char","bool","long","short"};
int typeCount = 8;

bool isValidReturnType(char word[]) {
    for (int i = 0; i < typeCount; i++) {
        if (strcmp(word, validTypes[i]) == 0) return true;
    }
    return false;
}

bool isAlpha(char c){
    return (c>='A'&&c<='Z')||(c>='a'&&c<='z');
}
bool isDigit(char c) {
    return (c>='0'&&c<='9');
}
bool isIdentifierStart(char c){
    return isAlpha(c)||c=='_';
}
bool isIdentifierChar(char c){
    return isAlpha(c)||isDigit(c)||c=='_';
}

bool isValidParameter(char param[]) {
    char type[50], name[50];
    int i=0,j=0,k=0;
    while (param[i]==' ') i++;
    while (param[i]!=' '&&param[i]!='\0') type[j++]=param[i++];
    type[j]='\0';
    if (!isValidReturnType(type)) return false;
    while (param[i]==' ') i++;
    if (param[i]=='\0') return false;
    if (!isIdentifierStart(param[i])) return false;
    while (param[i]!='\0') {
        if (!isIdentifierChar(param[i])) return false;
        name[k++]=param[i++];
    }
    name[k]='\0';
    return (k>0);
}

int checkParameters(char params[]) {
    if (params[0]=='\0') return 0;
    char single[100];
    int idx=0;
    bool allValid=true;
    bool hasParam=false;
    for (int i=0;; i++) {
        if (params[i]==',' || params[i]=='\0') {
            while (idx>0 && single[idx-1]==' ') idx--;
            single[idx]='\0';
            if (idx==0) {
                allValid=false;
            } else {
                if (!isValidParameter(single)) allValid=false;
                else hasParam=true;
            }
            idx=0;
            if (params[i]=='\0') break;
        } else {
            if (idx==0 && params[i]==' ') continue;
            single[idx++]=params[i];
        }
    }
    if (!hasParam && params[strlen(params)-1]==',') allValid=false;
    return allValid ? 1 : 2;
}

void checkFunction(ifstream &file) {
    char c, word[100], returnType[50], params[200];
    int idx=0,pIdx=0;
    bool gotReturn=false, collectingParams=false;
    bool hasOpen=false, hasClose=false, hasSemi=false;
    int openB=0, closeB=0;
    while (file.get(c)) {
        if (isAlpha(c)) {
            word[idx++]=c;
        } else {
            if (idx>0) {
                word[idx]='\0'; idx=0;
                if (!gotReturn) {
                    strcpy(returnType, word);
                    gotReturn=true;
                    if (!isValidReturnType(returnType)) {
                        cout<<"Invalid return type: "<<returnType<<endl;
                        gotReturn=false; hasOpen=hasClose=hasSemi=false; openB=closeB=0;
                        while(c!='\n'&&file.get(c));
                        continue;
                    }
                }
            }
            if (c=='(') { hasOpen=true; collectingParams=true; pIdx=0; }
            else if (c==')') { hasClose=true; collectingParams=false; params[pIdx]='\0'; }
            else if (c=='{') { openB++; }
            else if (c=='}') { closeB++; }
            else if (c==';') { hasSemi=true; }
        }
        if (collectingParams && c!='(') params[pIdx++]=c;
        int pRes=checkParameters(params);
        if (gotReturn  && hasClose && (hasSemi || (openB>0 && openB==closeB))) {
            if (pRes==2) {
                cout<<"Invalid Declaration"<<endl;
            } else {
                if (hasSemi && openB==0)
                    cout<<"Declaration only, ";
                else
                    cout<<"Declaration with definition, ";
                if (pRes==0) cout<<"Non-Parameterized"<<endl;
                else cout<<"Parameterized"<<endl;
            }
            gotReturn=false; hasOpen=hasClose=hasSemi=false; openB=closeB=0;
        }
    }
}

int main() {
    ifstream file("func.txt");
    if(!file){ cout<<"Could not open file!"<<endl; return 1; }
    checkFunction(file);
    file.close();
}
