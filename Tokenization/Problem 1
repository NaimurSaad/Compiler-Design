#include <iostream>
#include <fstream>
#include <string>
using namespace std;

string keywords[] = {
    "auto", "break", "case", "char", "const", "continue", "default", "do",
    "double", "else", "enum", "extern", "float", "for", "goto", "if",
    "int", "long", "register", "return", "short", "signed", "sizeof",
    "static", "struct", "switch", "typedef", "union", "unsigned", "void",
    "volatile", "while", "class", "public", "private", "protected",
    "template", "typename", "virtual", "new", "delete", "this", "using",
    "namespace", "bool", "true", "false", "try", "catch", "throw", "include" };

int kcount = sizeof(keywords) / sizeof(keywords[0]);

bool isKeyword(string s) {
    for (int i = 0; i < kcount; i++) {
        if (s == keywords[i]) {
            return true;
        }
    }
    return false;
}

char punctuations[] = {
    '.', ',', ';', ':', '?', '!', '(', ')',
    '[', ']', '{', '}', '\'', '"', '-', '_',
    '/', '\\', '|', '@', '#', '$', '%', '^',
    '&', '~', '`' };

int pcount = sizeof(punctuations) / sizeof(punctuations[0]);

bool isPuncChar(char c) {
    for (int i = 0; i < pcount; i++) {
        if (c == punctuations[i]) {
            return true;
        }
    }
    return false;
}

char operators[] = {'+', '-', '*', '/', '%', '=', '<', '>'};
int ocount = sizeof(operators) / sizeof(operators[0]);

bool isOpChar(char c) {
    for (int i = 0; i < ocount; i++) {
        if (c == operators[i]) {
            return true;
        }
    }
    return false;
}

bool isWhitespace(char c) {
    return (c == ' ' || c == '\t' || c == '\n' || c == '\r');
}

bool isDigit(char c) {
    return (c >= '0' && c <= '9');
}

bool isAlpha(char c) {
    return ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'));
}

bool isIdentifier(string s) {
    if (s.empty()) {
        return false;
    }

    if (!(isAlpha(s[0]) || s[0] == '_')) {
        return false;
    }

    for (int i = 1; i < s.length(); i++) {
        if (!(isAlpha(s[i]) || isDigit(s[i]) || s[i] == '_')) {
            return false;
        }
    }

    if (isKeyword(s)) {
        return false;
    }

    return true;
}

bool isCons(string s) {
    if(s.empty()){
        return false;
    }

    bool hasDecimal = false;

    for (int i = 0; i < s.length(); i++) {
        if (s[i] == '.') {
            if(hasDecimal){
            return false;
            }
            hasDecimal = true;
        }
        else if (!isDigit(s[i])) {
            return false;
        }
    }
    return true;
}

void printTokenType(string token) {
    if (isKeyword(token)) {
        cout << "Keyword";
    }
    else if (isIdentifier(token)) {
        cout << "Identifier";
    }
    else if (isCons(token)) {
        cout << "Constant";
    }
}

void processLine(string line) {


    string currentToken;
    bool firstInLine = true;

    for (int i = 0; i < line.length(); i++) {
        char c = line[i];

        if (isWhitespace(c)) {
            if (!currentToken.empty()) {
                if (!firstInLine)
                    cout << " ";
                printTokenType(currentToken);
                currentToken.clear();
                firstInLine = false;
            }
            continue;
        }

        if (c == '.' && i > 0 && isDigit(line[i - 1]) && isDigit(line[i + 1])) {
        currentToken += c;
        continue;
}

        if (isPuncChar(c) || isOpChar(c)) {
            if (!currentToken.empty()) {
                if (!firstInLine){
                    cout << " ";
                }
                printTokenType(currentToken);
                currentToken.clear();
                firstInLine = false;
            }
            if(!firstInLine){
                    cout << " ";
            }
            if(isPuncChar(c)){
                    cout << "Punctuation";
            }
            else cout << "Operator";
            firstInLine = false;
            continue;
        }

        currentToken += c;
    }

    if (!currentToken.empty()) {
        if(!firstInLine){
                cout << " ";
        }
        printTokenType(currentToken);
    }
    cout  << endl;
}

int main() {
    ifstream file("tokens.txt");

    if (!file) {
        cout << "Failed to open file!" << endl;
        return 1;
    }

    string line1,line;
        while (getline(file, line1)) {
       cout<<line1<<endl;
    }
    file.clear();
    file.seekg(0, ios::beg);

    cout<<endl;
    while (getline(file, line)) {
        processLine(line);
    }

    return 0;
}
